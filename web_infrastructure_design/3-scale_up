1. 1 Additional Server

    An additional server is added to scale the infrastructure. This server can be dedicated as a web server, application server, or database node, depending on scaling needs.

2. 2 Load Balancers (HAProxy Cluster)

    Why add this?: To improve traffic distribution and eliminate a single point of failure, we now use two HAProxy load balancers in a cluster. They work together to balance traffic and ensure high availability.

    Cluster Configuration: Both load balancers can direct traffic to the web and application servers. If one load balancer fails, the other takes over, ensuring uninterrupted service.

3. Separation of Components

    Web Server: A dedicated server handles web requests and serves static content (Nginx).

    Application Server: Another dedicated server processes dynamic requests and runs the application logic (PHP, Python, Node.js, etc.).

    Database Server: The database is hosted on a separate server to manage data operations (MySQL or similar).

Explanation of the Added Components

    1 Additional Server

        Why add it?: Adding an extra server improves scalability by distributing workloads across multiple servers. As traffic increases, more web or application servers can be added, ensuring better performance and greater reliability.

    2 Load Balancers (HAProxy Cluster)

        Why add them?: Having two load balancers increases redundancy and load distribution. If one fails, the other takes over, reducing downtime risks and ensuring continuous availability. This also enables more efficient traffic handling across servers.

    Separation of Components on Dedicated Servers

        Why separate components?:

            Web Server: Dedicated to handling HTTP(S) requests, reducing load on the app server and optimizing static file handling.

            Application Server: Dedicated to executing business logic and dynamic processing. Separation allows easier scaling under load.

            Database Server: Isolated from other services to prevent resource contention, improving performance, scalability, and allowing the database to grow independently.
